#!/usr/bin/env bash
set -euo pipefail

###############################################################################
# Master test script for all processors
#
# This script runs all individual processor test scripts and provides
# a comprehensive summary of test results across the entire processor
# architecture.
###############################################################################

echo "üß™ Running comprehensive processor test suite..."
echo "=================================================="

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Test script paths
SHARED_TEST="$SCRIPT_DIR/test-shared-utilities.sh"
CHANGELOG_TEST="$SCRIPT_DIR/test-changelog-processor.sh"
PR_ENHANCE_TEST="$SCRIPT_DIR/test-pr-enhance-processor.sh"
PR_DESCRIPTION_TEST="$SCRIPT_DIR/test-pr-description-processor.sh"
GENERIC_TEST="$SCRIPT_DIR/test-generic-processor.sh"
RELEASE_NOTES_TEST="$SCRIPT_DIR/test-release-notes-processor.sh"

# Results tracking
declare -A test_results
declare -A test_counts
total_tests=0
total_passed=0
failed_components=()

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to run a test script and capture results
run_test_script() {
  local test_name="$1"
  local test_script="$2"
  
  echo ""
  echo "üîç Running $test_name tests..."
  echo "----------------------------------------"
  
  if [[ ! -f "$test_script" ]]; then
    echo -e "${RED}‚ùå Test script not found: $test_script${NC}"
    test_results["$test_name"]="MISSING"
    return 1
  fi
  
  if ! [[ -x "$test_script" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Making $test_script executable...${NC}"
    chmod +x "$test_script"
  fi
  
  local output
  local exit_code
  
  if output=$("$test_script" 2>&1); then
    exit_code=0
  else
    exit_code=$?
  fi
  
  # Extract test counts from output
  local passed_count failed_count total_count
  if [[ "$output" =~ Results:\ ([0-9]+)/([0-9]+)\ tests\ passed ]]; then
    passed_count="${BASH_REMATCH[1]}"
    total_count="${BASH_REMATCH[2]}"
    failed_count=$((total_count - passed_count))
  else
    # Fallback if pattern doesn't match
    passed_count="?"
    failed_count="?"
    total_count="?"
  fi
  
  test_counts["$test_name"]="$passed_count/$total_count"
  
  if [[ $exit_code -eq 0 ]]; then
    test_results["$test_name"]="PASS"
    echo -e "${GREEN}‚úÖ $test_name: All tests passed ($passed_count/$total_count)${NC}"
    total_tests=$((total_tests + total_count))
    total_passed=$((total_passed + passed_count))
  else
    test_results["$test_name"]="FAIL"
    echo -e "${RED}‚ùå $test_name: Some tests failed ($passed_count/$total_count)${NC}"
    failed_components+=("$test_name")
    total_tests=$((total_tests + total_count))
    total_passed=$((total_passed + passed_count))
    
    # Show last few lines of output for failed tests
    echo ""
    echo "üìã Failure details:"
    echo "$output" | tail -10
  fi
}

# Function to display comprehensive summary
display_summary() {
  echo ""
  echo "=================================================="
  echo "üèÅ COMPREHENSIVE TEST RESULTS SUMMARY"
  echo "=================================================="
  echo ""
  
  # Component-wise results
  echo "üìä Component Test Results:"
  echo "-------------------------"
  for component in "Shared Utilities" "Changelog Processor" "PR Enhance Processor" "PR Description Processor" "Release Notes Processor" "Generic Processor"; do
    local status="${test_results[$component]:-SKIPPED}"
    local count="${test_counts[$component]:-0/0}"
    
    case "$status" in
      "PASS")
        echo -e "${GREEN}‚úÖ $component: $count tests passed${NC}"
        ;;
      "FAIL")
        echo -e "${RED}‚ùå $component: $count tests (some failed)${NC}"
        ;;
      "MISSING")
        echo -e "${YELLOW}‚ö†Ô∏è  $component: Test script missing${NC}"
        ;;
      *)
        echo -e "${YELLOW}‚ö†Ô∏è  $component: Skipped${NC}"
        ;;
    esac
  done
  
  echo ""
  echo "üìà Overall Statistics:"
  echo "---------------------"
  echo "Total Tests Run: $total_tests"
  echo "Tests Passed: $total_passed"
  echo "Tests Failed: $((total_tests - total_passed))"
  
  local pass_rate
  if [[ $total_tests -gt 0 ]]; then
    pass_rate=$(( (total_passed * 100) / total_tests ))
    echo "Pass Rate: ${pass_rate}%"
  else
    echo "Pass Rate: N/A"
  fi
  
  echo ""
  if [[ ${#failed_components[@]} -eq 0 && $total_tests -gt 0 ]]; then
    echo -e "${GREEN}üéâ ALL PROCESSOR TESTS PASSED! üéâ${NC}"
    echo ""
    echo "‚úÖ All processors are working correctly"
    echo "‚úÖ Shared utilities are functioning properly" 
    echo "‚úÖ Error handling is robust"
    echo "‚úÖ Edge cases are covered"
    echo ""
    echo -e "${GREEN}The processor architecture is ready for production! üöÄ${NC}"
  elif [[ ${#failed_components[@]} -eq 0 ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No tests were run${NC}"
  else
    echo -e "${RED}‚ùå SOME COMPONENTS HAVE FAILING TESTS${NC}"
    echo ""
    echo "Failed components:"
    for component in "${failed_components[@]}"; do
      echo -e "${RED}  ‚Ä¢ $component${NC}"
    done
    echo ""
    echo "Please review the test failures above and fix the issues."
  fi
  
  echo ""
  echo "=================================================="
}

# Function to show test coverage summary
display_coverage_summary() {
  echo ""
  echo "üîç Test Coverage Summary:"
  echo "------------------------"
  
  echo "Shared Utilities (shared.sh):"
  echo "  ‚Ä¢ Input validation and error handling"
  echo "  ‚Ä¢ Base64 encoding/decoding detection"
  echo "  ‚Ä¢ JSON processing and field extraction"
  echo "  ‚Ä¢ Template variable substitution"
  echo "  ‚Ä¢ Handlebars cleanup and formatting"
  echo "  ‚Ä¢ Performance and edge case testing"
  echo ""
  
  echo "Changelog Processor (changelog.sh):"
  echo "  ‚Ä¢ Keep a Changelog format compliance"
  echo "  ‚Ä¢ All section types (Added, Changed, Deprecated, etc.)"
  echo "  ‚Ä¢ Empty arrays and missing sections"
  echo "  ‚Ä¢ Special characters and Unicode support"
  echo "  ‚Ä¢ Variable substitution (VERSION, DATE)"
  echo "  ‚Ä¢ Large content and performance testing"
  echo ""
  
  echo "PR Enhance Processor (pr-enhance.sh):"
  echo "  ‚Ä¢ PR enhancement JSON schema compliance"
  echo "  ‚Ä¢ Changes array processing and formatting"
  echo "  ‚Ä¢ Summary, testing, and documentation fields"
  echo "  ‚Ä¢ Commit analysis handling"
  echo "  ‚Ä¢ Technical content and code references"
  echo "  ‚Ä¢ Unicode and international character support"
  echo ""
  
  echo "PR Description Processor (pr-description.sh):"
  echo "  ‚Ä¢ Complex nested JSON structure handling"
  echo "  ‚Ä¢ Conditional sections ({{#if}}, {{#unless}})"
  echo "  ‚Ä¢ Array processing ({{#each}} blocks)"
  echo "  ‚Ä¢ Breaking changes object arrays"
  echo "  ‚Ä¢ What's new and changes categorization"
  echo "  ‚Ä¢ Professional PR description formatting"
  echo ""

  echo "Release Notes Processor (release-notes-processor.sh):"
  echo "  ‚Ä¢ Changelog and commit extraction"
  echo "  ‚Ä¢ Previous release fallback logic"
  echo "  ‚Ä¢ OpenAI API invocation and error handling"
  echo "  ‚Ä¢ Template rendering of markdown"
  echo "  ‚Ä¢ GitHub release creation"
  echo ""
  
  echo "Generic Processor (generic.sh):"
  echo "  ‚Ä¢ Plain text and JSON content handling"
  echo "  ‚Ä¢ Basic template variable substitution"
  echo "  ‚Ä¢ Field replacement for unknown schemas"
  echo "  ‚Ä¢ Fallback processing for custom templates"
  echo "  ‚Ä¢ Error graceful handling for invalid JSON"
  echo "  ‚Ä¢ Multi-line content and large data support"
}

# Main execution
main() {
  echo "Starting comprehensive test suite for processor architecture..."
  echo "This will test all processors and shared utilities."
  echo ""
  
  # Run all test scripts
  run_test_script "Shared Utilities" "$SHARED_TEST"
  run_test_script "Changelog Processor" "$CHANGELOG_TEST"
  run_test_script "PR Enhance Processor" "$PR_ENHANCE_TEST"
  run_test_script "PR Description Processor" "$PR_DESCRIPTION_TEST"
  run_test_script "Release Notes Processor" "$RELEASE_NOTES_TEST"
  run_test_script "Generic Processor" "$GENERIC_TEST"
  
  # Display comprehensive results
  display_summary
  display_coverage_summary
  
  # Exit with appropriate code
  if [[ ${#failed_components[@]} -eq 0 && $total_tests -gt 0 ]]; then
    exit 0
  else
    exit 1
  fi
}

# Handle script arguments
if [[ $# -gt 0 ]]; then
  case "$1" in
    "--help"|"-h")
      echo "Usage: $0 [--help|--summary-only]"
      echo ""
      echo "This script runs comprehensive tests for all processors:"
      echo "  ‚Ä¢ Shared utilities (validation, JSON processing, etc.)"
      echo "  ‚Ä¢ Changelog processor (Keep a Changelog format)"
      echo "  ‚Ä¢ PR enhance processor (PR enhancement schema)"
      echo "  ‚Ä¢ PR description processor (complex nested structures)"
      echo "  ‚Ä¢ Generic processor (fallback for unknown templates)"
      echo ""
      echo "Options:"
      echo "  --help, -h          Show this help message"
      echo "  --summary-only      Show only the test coverage summary"
      exit 0
      ;;
    "--summary-only")
      display_coverage_summary
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      echo "Use --help for usage information"
      exit 1
      ;;
  esac
fi

main "$@" 