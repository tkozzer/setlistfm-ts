name: ü§ñ PR Template Automation

on:
  pull_request:
    types: [opened, edited, synchronize]
    branches:
      - preview

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  enhance-pr:
    runs-on: ubuntu-latest
    if: github.head_ref != 'preview' # Don't run on preview -> main PRs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR details
        id: pr-details
        run: |
          # Get PR information
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "base_sha=$BASE_SHA" >> $GITHUB_OUTPUT
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT

          # Save PR body to file for multiline handling
          cat << 'PR_BODY_EOF' > pr_body.txt
          ${{ github.event.pull_request.body }}
          PR_BODY_EOF

      - name: Analyze commits
        id: analyze-commits
        run: |
          # Get commit messages between base and head
          COMMITS=$(git log --format="%h %s%n%b" ${{ steps.pr-details.outputs.base_sha }}..${{ steps.pr-details.outputs.head_sha }} 2>/dev/null || echo "")

          # Handle case where no commits are found
          if [ -z "$COMMITS" ]; then
            echo "No commits found between base and head"
            echo "commits_analyzed=0" >> $GITHUB_OUTPUT
            echo "conventional_commits=0" >> $GITHUB_OUTPUT
            echo "breaking_changes=0" >> $GITHUB_OUTPUT
            echo "features=0" >> $GITHUB_OUTPUT
            echo "fixes=0" >> $GITHUB_OUTPUT
            echo "docs=0" >> $GITHUB_OUTPUT
            echo "chores=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Count conventional commits
          CONVENTIONAL_COUNT=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ (feat|fix|docs|style|refactor|perf|test|chore|ci|build)(\(.+\))?:" | wc -l)
          TOTAL_COUNT=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ " | wc -l)

          # Check for breaking changes
          BREAKING_CHANGES=$(echo "$COMMITS" | grep -E "(BREAKING CHANGE:|feat!|fix!)" | wc -l)

          # Check for feature/fix types
          FEATURES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ feat(\(.+\))?:" | wc -l)
          FIXES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ fix(\(.+\))?:" | wc -l)
          DOCS=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ docs(\(.+\))?:" | wc -l)
          CHORES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ (chore|ci|build)(\(.+\))?:" | wc -l)

          echo "commits_analyzed=$TOTAL_COUNT" >> $GITHUB_OUTPUT
          echo "conventional_commits=$CONVENTIONAL_COUNT" >> $GITHUB_OUTPUT
          echo "breaking_changes=$BREAKING_CHANGES" >> $GITHUB_OUTPUT
          echo "features=$FEATURES" >> $GITHUB_OUTPUT
          echo "fixes=$FIXES" >> $GITHUB_OUTPUT
          echo "docs=$DOCS" >> $GITHUB_OUTPUT
          echo "chores=$CHORES" >> $GITHUB_OUTPUT

          # Save commits to file for AI analysis
          cat << 'COMMITS_EOF' > commits_analysis.txt
          $COMMITS
          COMMITS_EOF

      - name: Generate AI enhancement
        id: ai-enhancement
        run: |
          # Read current PR body
          PR_BODY=$(cat pr_body.txt)
          COMMITS=$(cat commits_analysis.txt)

          # Create AI prompt
          cat << 'PROMPT_EOF' > ai_prompt.txt
          You are a technical writer helping to enhance a GitHub Pull Request for a TypeScript SDK library called "setlistfm-ts" (a client for the setlist.fm API).

          **Your Task:**
          Analyze the PR and commits, then generate an enhanced PR description that follows our project standards.

          **Context:**
          - This is a TypeScript SDK for the setlist.fm music API
          - We follow conventional commits and semantic versioning
          - The project uses a three-branch workflow: dev ‚Üí preview ‚Üí main
          - This PR targets the "preview" branch for release preparation

          **Current PR Title:** ${{ steps.pr-details.outputs.pr_title }}

          **Current PR Description:**
          ```
          $PR_BODY
          ```

          **Commit Analysis:**
          ```
          $COMMITS
          ```

          **Requirements:**
          1. If the PR description is empty or minimal, create a comprehensive one
          2. If it's already good, enhance it while preserving the original intent
          3. Use this exact structure:

          ## üìã Summary
          [Clear, concise description of what this PR accomplishes]

          ## üîÑ Changes
          [Bulleted list of specific changes, organized by type]

          ## üìù Commit Analysis
          - ‚úÖ [X] conventional commits found
          - ‚ö†Ô∏è [Y] commits need better formatting (if any)
          [List any commit message suggestions]

          ## üß™ Testing
          [Mention testing requirements or what was tested]

          ## üìö Documentation
          [Note any documentation updates or requirements]

          **Guidelines:**
          - Be concise but informative
          - Focus on user impact, not just technical details
          - Preserve any existing personality or context from the original description
          - If commits don't follow conventional format, mention it gently
          - Don't invent features that aren't in the commits
          - Use appropriate emojis but don't overdo it

          Generate only the enhanced PR description, no other commentary.
          PROMPT_EOF

          # Create JSON payload safely using jq
          PROMPT_CONTENT=$(cat ai_prompt.txt)

          # Call OpenAI API with properly escaped JSON
          RESPONSE=$(jq -n \
            --arg model "${{ secrets.OPENAI_MODEL }}" \
            --arg system_msg "You are a technical writer specializing in GitHub PR descriptions for TypeScript SDK projects. You write clear, structured, and helpful PR descriptions that follow project standards." \
            --arg user_msg "$PROMPT_CONTENT" \
            '{
              "model": $model,
              "messages": [
                {
                  "role": "system",
                  "content": $system_msg
                },
                {
                  "role": "user",
                  "content": $user_msg
                }
              ],
              "temperature": 0.3,
              "max_tokens": 1000
            }' | curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d @-)

          # Extract content from response and handle errors
          if [ -n "$RESPONSE" ] && echo "$RESPONSE" | jq -e '.choices[0].message.content' > /dev/null 2>&1; then
            ENHANCED_DESCRIPTION=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          else
            echo "AI enhancement failed or returned invalid response, keeping original description"
            echo "Response: $RESPONSE"
            ENHANCED_DESCRIPTION="$PR_BODY"
          fi

          # Fallback to basic template if both AI and original fail
          if [ -z "$ENHANCED_DESCRIPTION" ]; then
            ENHANCED_DESCRIPTION="## üìã Summary

            This PR contains changes targeting the preview branch for release preparation.

            ## üîÑ Changes
            Please see individual commits for details.

            ## üìù Commit Analysis
            - **${{ steps.analyze-commits.outputs.commits_analyzed }}** total commits analyzed
            - **${{ steps.analyze-commits.outputs.conventional_commits }}** follow conventional format

            ## üß™ Testing
            Please ensure all tests pass before merging.

            ## üìö Documentation
            Review any documentation updates as needed."
          fi

          # Save enhanced description
          cat << ENHANCED_EOF > enhanced_description.txt
          $ENHANCED_DESCRIPTION
          ENHANCED_EOF

      - name: Determine labels
        id: determine-labels
        run: |
          LABELS=""

          # Add labels based on commit analysis
          if [ "${{ steps.analyze-commits.outputs.features }}" -gt 0 ]; then
            LABELS="$LABELS,feature"
          fi

          if [ "${{ steps.analyze-commits.outputs.fixes }}" -gt 0 ]; then
            LABELS="$LABELS,bugfix"
          fi

          if [ "${{ steps.analyze-commits.outputs.docs }}" -gt 0 ]; then
            LABELS="$LABELS,documentation"
          fi

          if [ "${{ steps.analyze-commits.outputs.chores }}" -gt 0 ]; then
            LABELS="$LABELS,maintenance"
          fi

          if [ "${{ steps.analyze-commits.outputs.breaking_changes }}" -gt 0 ]; then
            LABELS="$LABELS,breaking-change"
          fi

          # Check if commits need attention (using awk instead of bc)
          CONVENTIONAL_COUNT="${{ steps.analyze-commits.outputs.conventional_commits }}"
          TOTAL_COUNT="${{ steps.analyze-commits.outputs.commits_analyzed }}"

          if [ "$TOTAL_COUNT" -gt 0 ]; then
            # Calculate percentage using awk (more reliable than bc)
            PERCENTAGE=$(awk "BEGIN {printf \"%.0f\", ($CONVENTIONAL_COUNT / $TOTAL_COUNT) * 100}")
            if [ "$PERCENTAGE" -lt 80 ]; then
              LABELS="$LABELS,needs-review"
            fi
          fi

          # Remove leading comma and save
          LABELS=$(echo "$LABELS" | sed 's/^,//')
          echo "labels=$LABELS" >> $GITHUB_OUTPUT

      - name: Update PR description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read the enhanced description
          ENHANCED_DESCRIPTION=$(cat enhanced_description.txt)

          # Update PR description using GitHub CLI
          gh pr edit ${{ steps.pr-details.outputs.pr_number }} --body-file enhanced_description.txt

      - name: Add labels and assign PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Auto-assign PR to repository owner
          gh pr edit ${{ steps.pr-details.outputs.pr_number }} --add-assignee ${{ github.repository_owner }}

          # Add labels if any were determined
          if [ "${{ steps.determine-labels.outputs.labels }}" != "" ]; then
            # Convert comma-separated labels to space-separated for gh cli
            LABELS="${{ steps.determine-labels.outputs.labels }}"
            LABEL_ARRAY=$(echo "$LABELS" | tr ',' ' ')

            # Create labels if they don't exist and add them to PR
            for label in $LABEL_ARRAY; do
              # Define label colors and descriptions
              case "$label" in
                "feature")
                  gh label create "$label" --color "0e8a16" --description "New feature or enhancement" --force 2>/dev/null || true
                  ;;
                "bugfix")
                  gh label create "$label" --color "d73a4a" --description "Bug fix" --force 2>/dev/null || true
                  ;;
                "documentation")
                  gh label create "$label" --color "0075ca" --description "Documentation improvements" --force 2>/dev/null || true
                  ;;
                "maintenance")
                  gh label create "$label" --color "fbca04" --description "Maintenance and chores" --force 2>/dev/null || true
                  ;;
                "breaking-change")
                  gh label create "$label" --color "b60205" --description "Breaking change" --force 2>/dev/null || true
                  ;;
                "needs-review")
                  gh label create "$label" --color "fbca04" --description "Needs additional review" --force 2>/dev/null || true
                  ;;
                "release")
                  gh label create "$label" --color "0e8a16" --description "Release related" --force 2>/dev/null || true
                  ;;
                "automated")
                  gh label create "$label" --color "ededed" --description "Automated PR or process" --force 2>/dev/null || true
                  ;;
              esac

              # Add label to PR (ignore errors if label doesn't exist)
              gh pr edit ${{ steps.pr-details.outputs.pr_number }} --add-label "$label" 2>/dev/null || echo "Warning: Could not add label '$label'"
            done
          fi

      - name: Add helpful comment if needed
        if: steps.analyze-commits.outputs.conventional_commits < steps.analyze-commits.outputs.commits_analyzed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CONVENTIONAL_COUNT="${{ steps.analyze-commits.outputs.conventional_commits }}"
          TOTAL_COUNT="${{ steps.analyze-commits.outputs.commits_analyzed }}"

          # Only proceed if we have commits to analyze
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            # Calculate percentage using awk (more reliable than bc)
            PERCENTAGE=$(awk "BEGIN {printf \"%.0f\", ($CONVENTIONAL_COUNT / $TOTAL_COUNT) * 100}")

            if [ "$PERCENTAGE" -lt 80 ]; then
            cat << 'COMMENT_EOF' > helpful_comment.txt
          ## üí° Commit Message Suggestions

          I noticed some commits could follow our [Conventional Commits](https://www.conventionalcommits.org/) format better. Here are some examples:

          **Current style** ‚Üí **Suggested format**
          - `fixed pagination issue` ‚Üí `fix(api): resolve pagination boundary error`
          - `updated docs` ‚Üí `docs(readme): add usage examples for new endpoints`
          - `small refactor` ‚Üí `refactor(utils): simplify error handling logic`

          **Why this helps:**
          - ü§ñ Our automated changelog generation reads these patterns
          - üìã Makes it easier to understand changes at a glance
          - üîÑ Helps with semantic versioning decisions

          No worries though - your PR looks great overall! These are just suggestions for future commits. üòä

          **Reference:** Check out our [Contributing Guide](CONTRIBUTING.md#commit-messages) for more details.
          COMMENT_EOF

            gh pr comment ${{ steps.pr-details.outputs.pr_number }} --body-file helpful_comment.txt
            fi
          fi

      - name: Summary comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat << 'SUMMARY_EOF' > summary_comment.txt
          ## ü§ñ PR Analysis Complete

          **Commit Analysis:**
          - üìä **${{ steps.analyze-commits.outputs.commits_analyzed }}** total commits analyzed
          - ‚úÖ **${{ steps.analyze-commits.outputs.conventional_commits }}** follow conventional format
          - üÜï **${{ steps.analyze-commits.outputs.features }}** new features
          - üêõ **${{ steps.analyze-commits.outputs.fixes }}** bug fixes
          - üìö **${{ steps.analyze-commits.outputs.docs }}** documentation updates
          - ‚ö†Ô∏è **${{ steps.analyze-commits.outputs.breaking_changes }}** breaking changes

          **Labels Added:** `${{ steps.determine-labels.outputs.labels }}`

          This PR description has been enhanced by AI to follow our project standards. Thanks for contributing! üé∏
          SUMMARY_EOF

          gh pr comment ${{ steps.pr-details.outputs.pr_number }} --body-file summary_comment.txt
