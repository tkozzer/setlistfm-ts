# üö® LOCAL‚ÄëONLY CI mirror for `act`.  Never enable on GitHub.
# run with:  act workflow_dispatch -W .github/workflows/ci-local.yml
name: üè† CI Local (Production Mirror)

on:
  workflow_dispatch:

concurrency:
  group: ci-local-${{ github.run_id }}
  cancel-in-progress: true

# ##############################################################################
#  QUICK CHECKS (Node 22, Ubuntu)
# ##############################################################################
jobs:
  quick-checks:
    name: üöÄ Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      # --- pnpm, then Node (cache works) ------------------------------------
      - uses: pnpm/action-setup@v4
        with:
          version: 10.11.1
          standalone: true
          run_install: false # install after cache step

      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: pnpm

      - run: corepack enable
      - run: pnpm install --no-frozen-lockfile

      # --- fast sanity checks -----------------------------------------------
      - run: pnpm lint
      - run: pnpm type-check
      - run: pnpm vitest run src/

  # ##############################################################################
  #  CROSS‚ÄëPLATFORM MATRIX (Act Linux containers)
  # ##############################################################################
  test-matrix:
    name: üß™ Test (${{ matrix.node }} on ${{ matrix.platform_name }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-checks

    strategy:
      fail-fast: false
      matrix:
        include:
          - node: 18.x
            platform_name: Ubuntu 22.04
            container_image: catthehacker/ubuntu:act-22.04
          - node: 20.x
            platform_name: Ubuntu 20.04
            container_image: catthehacker/ubuntu:act-20.04
          - node: 22.x
            platform_name: Ubuntu Latest
            container_image: catthehacker/ubuntu:act-latest
          - node: 22.x
            platform_name: Windows Sim
            simulate_windows: true
          - node: 22.x
            platform_name: macOS Sim
            simulate_macos: true

    container:
      image: ${{ matrix.container_image }}
      options: --privileged

    steps:
      - uses: actions/checkout@v4

      # --- pnpm then Node ----------------------------------------------------
      - uses: pnpm/action-setup@v4
        with:
          version: 10.11.1
          standalone: true
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm

      - run: corepack enable
      - run: pnpm install --no-frozen-lockfile

      # --- tests -------------------------------------------------------------
      - run: pnpm vitest run src/
      - run: pnpm type-check

      - name: ü™ü Windows simulation checks
        if: matrix.simulate_windows == true
        run: node -e "console.log(require('path').win32.join('src','demo','file.ts'))"

      - name: üçé macOS simulation checks
        if: matrix.simulate_macos == true
        run: |
          touch test.tmp
          ls -la test.tmp
          rm test.tmp

  # ##############################################################################
  #  COVERAGE  (Node 22)
  # ##############################################################################
  coverage:
    name: üìä Coverage & Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-checks

    steps:
      - uses: actions/checkout@v4

      # --- pnpm then Node ----------------------------------------------------
      - uses: pnpm/action-setup@v4
        with:
          version: 10.11.1
          standalone: true
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: pnpm

      - run: corepack enable
      - run: pnpm install --no-frozen-lockfile

      # --- coverage run ------------------------------------------------------
      - run: pnpm vitest run --coverage src/
      - run: |
          echo "üìä Coverage summary"
          [ -f coverage/coverage-summary.json ] && cat coverage/coverage-summary.json || true

  # ##############################################################################
  #  BUILD VERIFICATION  (Node 22)
  # ##############################################################################
  build-verification:
    name: üèóÔ∏è Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-checks

    steps:
      - uses: actions/checkout@v4

      # --- pnpm then Node ----------------------------------------------------
      - uses: pnpm/action-setup@v4
        with:
          version: 10.11.1
          standalone: true
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: pnpm

      - run: corepack enable
      - run: pnpm install --no-frozen-lockfile

      # --- build & size checks ----------------------------------------------
      - run: pnpm build:all
      - run: pnpm vitest run tests/
      - run: pnpm build:analyze
      - run: |
          echo "üèóÔ∏è Build Summary"
          ls -la dist/
          ls -lh dist/ | grep -E '\.(js|cjs)$' || true

  # ##############################################################################
  #  SUCCESS GATE
  # ##############################################################################
  ci-success:
    name: ‚úÖ CI Success
    runs-on: ubuntu-latest
    if: always()
    needs:
      - quick-checks
      - test-matrix
      - coverage
      - build-verification

    steps:
      - run: |
          set -e
          [ "${{ needs.quick-checks.result }}" = success ] || { echo "‚ùå quick-checks failed"; exit 1; }
          [ "${{ needs.test-matrix.result }}"   = success ] || { echo "‚ùå test-matrix failed"; exit 1; }
          [ "${{ needs.coverage.result }}"      = success ] || { echo "‚ùå coverage failed"; exit 1; }
          [ "${{ needs.build-verification.result }}" = success ] || { echo "‚ùå build-verification failed"; exit 1; }
          echo "All local CI jobs passed üéâ"
