# 📝 Generate Release Notes using OpenAI

name: 📝 Release Notes Generate

on:
  workflow_dispatch:
    inputs:
      version:
        description: Target version
        required: true
      dry_run:
        description: Generate notes without creating GitHub release
        type: boolean
        default: false
      temperature:
        description: AI creativity level (0.0-1.0)
        default: "0.2"
      debug:
        description: Enable debug output
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  generate:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'gpt-4o-mini' }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: 🛠️ Setup Node & pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: 22.x

      - name: 🔧 Install jq for debugging
        if: github.event.inputs.debug == 'true'
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: 📦 Determine version
        id: version
        run: |
          VERSION=$(.github/scripts/release-notes/determine-version.sh \
            --trigger-type "workflow_dispatch" \
            --manual-version "${{ github.event.inputs.version }}" \
            --verbose)
          echo "ver=$VERSION" >> "$GITHUB_OUTPUT"

      - name: 📊 Collect git history
        id: git_history
        run: |
          SINCE_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -n "$SINCE_TAG" ]]; then
            echo "Collecting git history since tag: $SINCE_TAG"
            GIT_COMMITS=$(.github/scripts/release-notes/collect-git-history.sh \
              --since-tag "$SINCE_TAG" \
              --output-format json \
              ${{ github.event.inputs.debug == 'true' && '--verbose' || '' }})
          else
            echo "No previous tags found, collecting all history"
            GIT_COMMITS=$(.github/scripts/release-notes/collect-git-history.sh \
              --since-tag HEAD~10 \
              --output-format json \
              ${{ github.event.inputs.debug == 'true' && '--verbose' || '' }})
          fi

          # Base64 encode for safe GitHub Actions variable passing
          GIT_COMMITS_B64=$(echo "$GIT_COMMITS" | base64 -w 0)
          echo "git_commits_b64=$GIT_COMMITS_B64" >> "$GITHUB_OUTPUT"
          echo "since_tag=$SINCE_TAG" >> "$GITHUB_OUTPUT"

      - name: 📈 Extract commit statistics
        id: commit_stats
        run: |
          SINCE_TAG="${{ steps.git_history.outputs.since_tag }}"
          if [[ -n "$SINCE_TAG" ]]; then
            COMMIT_STATS=$(.github/scripts/release-notes/extract-commit-stats.sh \
              --since-tag "$SINCE_TAG" \
              --output-format json \
              ${{ github.event.inputs.debug == 'true' && '--verbose' || '' }})
          else
            COMMIT_STATS=$(.github/scripts/release-notes/extract-commit-stats.sh \
              --since-tag HEAD~10 \
              --output-format json \
              ${{ github.event.inputs.debug == 'true' && '--verbose' || '' }})
          fi

          # Base64 encode for safe GitHub Actions variable passing
          COMMIT_STATS_B64=$(echo "$COMMIT_STATS" | base64 -w 0)
          echo "commit_stats_b64=$COMMIT_STATS_B64" >> "$GITHUB_OUTPUT"

      - name: 📋 Extract changelog entry
        id: changelog
        run: |
          if [[ -f "CHANGELOG.md" ]]; then
            # Use existing changelog extraction script
            CHANGELOG_ENTRY=$(.github/scripts/release-pr/extract-changelog-entry.sh \
              --version "${{ steps.version.outputs.ver }}" \
              --changelog "CHANGELOG.md" \
              ${{ github.event.inputs.debug == 'true' && '--verbose' || '' }})

            # Base64 encode for safe GitHub Actions variable passing
            CHANGELOG_ENTRY_B64=$(echo "$CHANGELOG_ENTRY" | base64 -w 0)
            echo "changelog_entry_b64=$CHANGELOG_ENTRY_B64" >> "$GITHUB_OUTPUT"
          else
            echo "No CHANGELOG.md found, skipping changelog extraction"
            echo "changelog_entry_b64=" >> "$GITHUB_OUTPUT"
          fi

      - name: 🎯 Prepare comprehensive AI context
        id: ai_context
        run: |
          # Use our comprehensive context preparation script
          TEMPLATE_VARS=$(.github/scripts/release-notes/prepare-ai-context.sh \
            --version "${{ steps.version.outputs.ver }}" \
            --git-commits-b64 "${{ steps.git_history.outputs.git_commits_b64 }}" \
            --commit-stats-b64 "${{ steps.commit_stats.outputs.commit_stats_b64 }}" \
            --changelog-entry-b64 "${{ steps.changelog.outputs.changelog_entry_b64 }}" \
            --since-tag "${{ steps.git_history.outputs.since_tag }}" \
            ${{ github.event.inputs.debug == 'true' && '--verbose' || '' }})

          echo "template_vars=$TEMPLATE_VARS" >> "$GITHUB_OUTPUT"

      - name: 🔍 Debug - System prompt
        if: github.event.inputs.debug == 'true'
        run: |
          echo "=== SYSTEM PROMPT ==="
          cat .github/prompts/release-notes.sys.md
          echo "====================="

      - name: 🔍 Debug - User template
        if: github.event.inputs.debug == 'true'
        run: |
          echo "=== USER TEMPLATE ==="
          cat .github/prompts/release-notes.user.md
          echo "====================="

      - name: 🔍 Debug - AI input variables
        if: github.event.inputs.debug == 'true'
        run: |
          echo "=== AI INPUT VARIABLES ==="
          echo "Temperature: ${{ github.event.inputs.temperature || '0.2' }}"
          echo "Model: ${{ env.OPENAI_MODEL }}"
          echo "Max tokens: 1500"
          echo ""
          echo "Template variables (first 1000 chars):"
          echo "--- Variables Preview ---"
          printf '%s' "${{ steps.ai_context.outputs.template_vars }}" | head -c 1000
          echo ""
          echo "--- End Variables Preview ---"
          echo "=========================="

      - name: 🔍 Debug - Decoded template variables
        if: github.event.inputs.debug == 'true'
        run: |
          echo "=== DECODED TEMPLATE VARIABLES ==="
          echo "${{ steps.ai_context.outputs.template_vars }}" | base64 -d | jq -r '
            "VERSION: " + .VERSION,
            "VERSION_TYPE: " + .VERSION_TYPE,
            "HAS_BREAKING_CHANGES: " + .HAS_BREAKING_CHANGES,
            "",
            "CHANGELOG_ENTRY (first 200 chars):",
            (.CHANGELOG_ENTRY_B64 // "" | if length > 0 then @base64d else "Not available" end | .[0:200]),
            "",
            "COMMIT_STATS:",
            (.COMMIT_STATS_B64 // "" | if length > 0 then @base64d else "{}" end),
            "",
            "GIT_COMMITS (count):",
            (.GIT_COMMITS_B64 // "" | if length > 0 then (@base64d | fromjson | length | tostring) else "0" end)
          '
          echo "=================================="

      - name: 🔍 Debug - Final substituted user prompt
        if: github.event.inputs.debug == 'true'
        run: |
          echo "=== FINAL USER PROMPT SENT TO AI ==="
          # Temporarily substitute template variables to show what AI receives
          TEMP_PROMPT=$(cat .github/prompts/release-notes.user.md)
          VARS_JSON=$(echo "${{ steps.ai_context.outputs.template_vars }}" | base64 -d)

          # Extract variables from JSON
          VERSION=$(echo "$VARS_JSON" | jq -r '.VERSION // "N/A"')
          VERSION_TYPE=$(echo "$VARS_JSON" | jq -r '.VERSION_TYPE // "N/A"')
          HAS_BREAKING=$(echo "$VARS_JSON" | jq -r '.HAS_BREAKING_CHANGES // "false"')

          # Decode base64 content with size limits for display - avoid broken pipes
          CHANGELOG_B64=$(echo "$VARS_JSON" | jq -r '.CHANGELOG_ENTRY_B64 // ""')
          if [[ -n "$CHANGELOG_B64" && "$CHANGELOG_B64" != "null" ]]; then
            CHANGELOG_CONTENT=$(echo "$CHANGELOG_B64" | base64 -d 2>/dev/null | head -c 300 || echo "Decode error")
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}..."
          else
            CHANGELOG_CONTENT="Not available"
          fi

          COMMIT_STATS_B64=$(echo "$VARS_JSON" | jq -r '.COMMIT_STATS_B64 // ""')
          if [[ -n "$COMMIT_STATS_B64" && "$COMMIT_STATS_B64" != "null" ]]; then
            COMMIT_STATS=$(echo "$COMMIT_STATS_B64" | base64 -d 2>/dev/null || echo "{}")
          else
            COMMIT_STATS="{}"
          fi

          GIT_COMMITS_B64=$(echo "$VARS_JSON" | jq -r '.GIT_COMMITS_B64 // ""')
          if [[ -n "$GIT_COMMITS_B64" && "$GIT_COMMITS_B64" != "null" ]]; then
            GIT_COMMITS_COUNT=$(echo "$GIT_COMMITS_B64" | base64 -d 2>/dev/null | jq -r 'length' 2>/dev/null || echo "0")
          else
            GIT_COMMITS_COUNT="0"
          fi

          PREVIOUS_RELEASE_B64=$(echo "$VARS_JSON" | jq -r '.PREVIOUS_RELEASE_B64 // ""')
          if [[ -n "$PREVIOUS_RELEASE_B64" && "$PREVIOUS_RELEASE_B64" != "null" ]]; then
            PREVIOUS_RELEASE=$(echo "$PREVIOUS_RELEASE_B64" | base64 -d 2>/dev/null | head -c 200 || echo "Decode error")
            PREVIOUS_RELEASE="${PREVIOUS_RELEASE}..."
          else
            PREVIOUS_RELEASE="Not available"
          fi

          # Show the substituted prompt
          echo "Generate structured release notes for version $VERSION ($VERSION_TYPE release) of the setlistfm-ts SDK."
          echo ""
          echo "## Context Data"
          echo ""
          echo "**Changelog Entry:**"
          echo "$CHANGELOG_CONTENT"
          echo ""
          echo "**Git Commits:** $GIT_COMMITS_COUNT commits (full JSON data passed to AI)"
          echo ""
          echo "**Commit Statistics:**"
          echo "$COMMIT_STATS"
          echo ""
          echo "**Breaking Changes Detected:** $HAS_BREAKING"
          echo ""
          echo "**Previous Release Notes:**"
          echo "$PREVIOUS_RELEASE"
          echo ""
          echo "[... rest of template instructions follow ...]"
          echo "====================================="

      - name: 🤖 Generate release notes
        id: ai
        uses: ./.github/actions/openai-chat
        with:
          openai_api_key: ${{ env.OPENAI_API_KEY }}
          system-path: .github/prompts/release-notes.sys.md
          template-path: .github/prompts/release-notes.user.md
          schema-path: .github/schema/release-notes.schema.json
          output-path: .github/templates/release-notes.tmpl.md
          vars: ${{ steps.ai_context.outputs.template_vars }}
          model: ${{ env.OPENAI_MODEL }}
          temperature: ${{ github.event.inputs.temperature || '0.2' }}
          max-tokens: 1500

      - name: 🔍 Debug - AI JSON response
        if: github.event.inputs.debug == 'true'
        env:
          AI_JSON_CONTENT: ${{ steps.ai.outputs.content }}
        run: |
          # Pass content via environment variable to avoid shell parsing issues
          ./.github/scripts/release-pr/debug-ai-response.sh \
            --content "$AI_JSON_CONTENT" \
            --title "AI JSON RESPONSE" \
            --max-chars 800

      - name: 📤 Save release notes
        run: |
          printf '%s' "${{ steps.ai.outputs.formatted_content }}" > release-notes.md

      - name: 🔍 Debug - Final formatted release notes
        if: github.event.inputs.debug == 'true'
        env:
          FORMATTED_CONTENT: ${{ steps.ai.outputs.formatted_content }}
        run: |
          # Pass content via environment variable to avoid shell parsing issues
          ./.github/scripts/release-pr/debug-ai-response.sh \
            --content "$FORMATTED_CONTENT" \
            --title "FINAL FORMATTED RELEASE NOTES" \
            --max-chars 1200

      - name: 📝 Fallback if AI fails
        if: steps.ai.outputs.formatted_content == '' && steps.ai.outputs.content == ''
        run: |
          echo "# 🎉 setlistfm-ts v${{ steps.version.outputs.ver }}" > release-notes.md
          echo "" >> release-notes.md
          echo "Automated release notes generation failed. Please refer to CHANGELOG.md for details." >> release-notes.md

      - name: ✅ Validate release notes
        run: |
          .github/scripts/release-notes/validate-release-notes.sh \
            --notes-file "release-notes.md" \
            --version "${{ steps.version.outputs.ver }}" \
            ${{ github.event.inputs.debug == 'true' && '--verbose' || '' }}

      - name: 📤 Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md

      - name: 🚀 Create/Update GitHub Release
        if: env.GH_TOKEN != '' && github.event.inputs.dry_run != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          .github/scripts/release-notes/manage-github-release.sh \
            --version "${{ steps.version.outputs.ver }}" \
            --notes-file "release-notes.md" \
            ${{ github.event.inputs.debug == 'true' && '--verbose' || '' }}

      - name: 🧪 Dry run summary
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🧪 DRY RUN MODE - No GitHub release created"
          echo "📋 Generated release notes preview:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          cat release-notes.md
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Validation passed - Release notes ready for publication"
