name: üîÑ Release Preparation

on:
  push:
    branches: [preview]

jobs:
  release-preparation:
    name: üîÑ Release Preparation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      pull-requests: read

    steps:
      # ------------------------------------------------------------------ #
      #  1.  Setup                                                         #
      # ------------------------------------------------------------------ #
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # full history for changelog
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.1

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: pnpm

      - name: üì• Install dependencies
        run: pnpm install --frozen-lockfile

      # ------------------------------------------------------------------ #
      #  2.  Detect version bump                                           #
      # ------------------------------------------------------------------ #
      - name: üè∑Ô∏è Get last release tag
        id: last_release
        shell: bash
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$LAST_TAG" >> "$GITHUB_OUTPUT"
          echo "Last release tag: $LAST_TAG"

      - name: üìù Collect recent commits
        id: commits
        shell: bash
        run: |
          COMMITS=$(git log "${{ steps.last_release.outputs.tag }}..HEAD" --pretty=format:"%h %s%n%b" | head -50)
          {
            echo "commits<<EOF"
            echo "$COMMITS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          echo "Recent commits since ${{ steps.last_release.outputs.tag }}:"
          echo "$COMMITS"

      - name: üîç Determine version bump type
        id: version_bump
        shell: bash
        run: |
          # write commit list to temp file
          printf '%s\n' "${{ steps.commits.outputs.commits }}" > commits_temp.txt

          if grep -Eq '(^|[\n])BREAKING CHANGE:|!:' commits_temp.txt; then
            BUMP=major
          elif grep -Eq '^[a-f0-9]+ feat(\(|:)' commits_temp.txt; then
            BUMP=minor
          else
            BUMP=patch
          fi

          echo "type=$BUMP" >> "$GITHUB_OUTPUT"
          echo "Version bump => $BUMP"

          rm -f commits_temp.txt

      # ------------------------------------------------------------------ #
      #  3.  Bump package.json version                                     #
      # ------------------------------------------------------------------ #
      - name: üìà Update package version
        id: version_update
        shell: bash
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          NEW_VERSION=$(npm version "${{ steps.version_bump.outputs.type }}" --no-git-tag-version)
          NEW_VERSION=${NEW_VERSION#v}

          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "New version: $NEW_VERSION"

      # ------------------------------------------------------------------ #
      #  4.  Generate changelog with OpenAI                                #
      # ------------------------------------------------------------------ #
      - name: ü§ñ Generate changelog entry with OpenAI
        id: changelog
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ secrets.OPENAI_MODEL || 'gpt-4o-mini' }}
        run: |
          set -euo pipefail

          VERSION="${{ steps.version_update.outputs.version }}"
          DATE="$(date +%Y-%m-%d)"

          # ----------------------------------------------------------------
          #  4.1  Prepare commit text (truncate to 12KB to keep payload ok)
          # ----------------------------------------------------------------
          printf '%s\n' "${{ steps.commits.outputs.commits }}" > commits_raw.txt
          MAX_BYTES=12288                             # 12KB safety margin
          COMMITS_CONTENT=$(head -c "$MAX_BYTES" commits_raw.txt)
          rm -f commits_raw.txt

          # ----------------------------------------------------------------
          #  4.2  Static system message (here-doc keeps quoting simple)
          # ----------------------------------------------------------------
          read -r -d '' SYSTEM_MSG <<'SYS_EOF'
          You are an expert technical writer who creates changelog entries following Keep a Changelog standards. Generate entries that are FOR HUMANS, not machines - focus on what end users and developers need to know. ONLY use these categories: Added, Changed, Deprecated, Removed, Fixed, Security. Be specific about technical impact but NEVER invent features that don't exist. If no meaningful changes are provided, return exactly:

          ### Changed
          - Minor updates and improvements
          SYS_EOF

          # ----------------------------------------------------------------
          #  4.3  Build OpenAI JSON with jq --arg (no printf vulnerabilities)
          # ----------------------------------------------------------------
          jq -n \
            --arg model   "$OPENAI_MODEL" \
            --arg sys     "$SYSTEM_MSG" \
            --arg version "$VERSION" \
            --arg date    "$DATE" \
            --arg commits "$COMMITS_CONTENT" \
            '{
              model: $model,
              messages: [
                {role:"system", content:$sys},
                {role:"user",
                 content: ("Generate a changelog entry for version " + $version +
                           " with date " + $date + ". Recent commits:\n\n" +
                           $commits + "\n\nIMPORTANT: If the commits list above is " +
                           "empty or contains no meaningful changes, respond with ONLY:\n" +
                           "### Changed\n- Minor updates and improvements\n\n" +
                           "Analyse the commits carefully and write entries that help " +
                           "users understand what changed and how it affects them. " +
                           "This is for the setlistfm-ts TypeScript SDK. " +
                           "Focus on user-facing changes, API modifications, " +
                           "and developer‚Äëexperience improvements. Be accurate and never invent features.") }
              ],
              max_tokens: 1500,
              temperature: 0.3
            }' > changelog_prompt.json

          # ----------------------------------------------------------------
          #  4.4  Call OpenAI (graceful fallback on error)
          # ----------------------------------------------------------------
          FALLBACK_CHANGELOG=$'### Changed\n- Minor updates and improvements\n- Enhanced CI/CD pipeline\n- Updated dependencies and tooling'

          if [[ -z "${OPENAI_API_KEY:-}" ]]; then
            echo "OPENAI_API_KEY missing ‚Äì using fallback changelog"
            CHANGELOG_ENTRY="$FALLBACK_CHANGELOG"
          else
            echo "Requesting changelog from OpenAI‚Ä¶"
            API_RESPONSE=$(curl -sS -w '\n%{http_code}' \
              -H 'Content-Type: application/json' \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d @changelog_prompt.json \
              https://api.openai.com/v1/chat/completions || true)

            HTTP_CODE=$(echo "$API_RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$API_RESPONSE" | head -n -1)

            if [[ "$HTTP_CODE" == "200" ]]; then
              CHANGELOG_ENTRY=$(echo "$RESPONSE_BODY" | jq -r '.choices[0].message.content // empty')
              [[ -z "$CHANGELOG_ENTRY" || "$CHANGELOG_ENTRY" == "null" ]] && CHANGELOG_ENTRY="$FALLBACK_CHANGELOG"
            else
              echo "OpenAI call failed (HTTP $HTTP_CODE) ‚Äì using fallback"
              CHANGELOG_ENTRY="$FALLBACK_CHANGELOG"
            fi
          fi

          # expose to later steps
          {
            echo "changelog_entry<<EOF"
            echo "$CHANGELOG_ENTRY"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # ------------------------------------------------------------------ #
      #  5.  Write CHANGELOG.md                                            #
      # ------------------------------------------------------------------ #
      - name: üìù Update CHANGELOG.md
        shell: bash
        run: |
          VERSION="${{ steps.version_update.outputs.version }}"
          TODAY=$(date +%Y-%m-%d)

          {
            echo "## [$VERSION] - $TODAY"
            echo
            echo "${{ steps.changelog.outputs.changelog_entry }}"
            echo
            echo '---'
            echo
          } > new_entry.md

          # Insert after existing header (first 9 lines), keep rest intact
          { head -n 9 CHANGELOG.md; cat new_entry.md; tail -n +10 CHANGELOG.md; } > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md
          rm new_entry.md

      # ------------------------------------------------------------------ #
      #  6.  Commit & push                                                 #
      # ------------------------------------------------------------------ #
      - name: üíæ Commit version & changelog updates
        shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name  "GitHub Action"
          git add package.json CHANGELOG.md
          git commit -m "chore(release): bump version to ${{ steps.version_update.outputs.version }} and update changelog" || echo "Nothing to commit"
          git push

      # ------------------------------------------------------------------ #
      #  7.  Summary                                                       #
      # ------------------------------------------------------------------ #
      - name: üéâ Release preparation summary
        shell: bash
        run: |
          {
            echo "## üéâ Release Preparation Completed!"
            echo
            echo "üè∑Ô∏è **Version**: ${{ steps.version_update.outputs.version }}"
            echo "üìà **Bump Type**: ${{ steps.version_bump.outputs.type }}"
            echo "üìù **Changelog**: Generated and committed"
            echo
            echo "### üìã Next Steps:"
            echo "1. Review the version bump and changelog entry."
            echo "2. Create PR from preview -> main when ready to publish."
            echo "3. Merge to main will trigger GitHub release and npm publishing."
            echo
            echo "üöÄ **Preview branch is ready for production release!**"
          } >> "$GITHUB_STEP_SUMMARY"
