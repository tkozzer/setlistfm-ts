# .github/workflows/pr-enhance.yml
#
# 🤖  Pull‑request enhancer
# • Runs only for feature / fix branches that target `preview`
# • Calls the local composite action (.github/actions/openai-chat)
#   to generate an improved PR description from the prompt templates
# • Adds helpful labels and an optional guidance comment
# ---------------------------------------------------------------------

name: 🤖 PR Enhance

on:
  pull_request:
    types: [opened, edited, synchronize]
    branches: [preview]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  enhance:
    # Skip if the *source* branch is the special `preview` branch itself
    if: github.head_ref != 'preview'
    runs-on: ubuntu-latest

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'gpt-4o-mini' }}

    steps:
      # -------------------------------------------------------------------
      # 1) Repo checkout (needed for git log & prompt templates)
      # -------------------------------------------------------------------
      - name: ⬇️ Checkout repo (with full history for git log)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------------------------------------------------
      # 2) Gather PR + commit information
      # -------------------------------------------------------------------
      - name: 📑 Collect PR meta & commits
        id: meta
        shell: bash
        run: |
          set -euo pipefail

          # ---------- Basic PR fields ----------
          echo "number=${{ github.event.pull_request.number }}"   >> "$GITHUB_OUTPUT"
          echo "title=${{ github.event.pull_request.title }}"     >> "$GITHUB_OUTPUT"

          # ---------- Save the original body ----------
          printf "%s" "${{ github.event.pull_request.body || '' }}" > pr_body.txt

          # ---------- Commit list (hash  subject) ----------
          git log --pretty=format:"%h %s" \
            ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} \
            > commits.txt || touch commits.txt

          # ---------- Changed files ----------
          git diff --name-only \
            ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} \
            > files.txt || true

          # ---------- Conventional-commit stats ----------
          total=$(wc -l < commits.txt | xargs)
          conv=$(grep -cE '^(feat|fix|docs|style|refactor|perf|test|chore|ci|build)(\(.*\))?:' commits.txt || true)

          {
            echo "total=$total"
            echo "conv=$conv"
          } >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------------------
      # 3) Build a structured user prompt
      # -------------------------------------------------------------------
      - name: 📝 Create user prompt
        id: prompt
        shell: bash
        run: |
          cat > user_prompt.md <<'EOF'
          # Pull-request data (for the AI)

          ## Title
          {{PR_TITLE}}

          ## Current body
          {{PR_BODY}}

          ## Commits ({{TOTAL_COMMITS}})
          ```
          {{COMMITS}}
          ```

          ## Changed files
          ```
          {{FILES}}
          ```

          ---
          👉 **Task:** Rewrite / improve the PR description following the headings *exactly*
            and **only** using information visible above.
            If something is unknown, write “N/A”.

          Headings to produce:

          ## 📋 Summary
          ## 🔄 Changes
          ## 📝 Commit Analysis
          ## 🧪 Testing
          ## 📚 Documentation
          EOF

          # Replace placeholders with real content (multiline-safe)
          sed -i \
            -e "s|{{PR_TITLE}}|${{ steps.meta.outputs.title }}|g" \
            -e "/{{PR_BODY}}/{
                  r pr_body.txt
                  d
                }" \
            -e "/{{COMMITS}}/{
                  r commits.txt
                  d
                }" \
            -e "/{{FILES}}/{
                  r files.txt
                  d
                }" \
            -e "s|{{TOTAL_COMMITS}}|${{ steps.meta.outputs.total }}|g" \
            user_prompt.md

      # -------------------------------------------------------------------
      # 4) Call the OpenAI Chat API (low‑temperature, strong model)
      # -------------------------------------------------------------------
      - name: 🤖 Generate enhanced description
        id: ai
        uses: ./.github/actions/openai-chat
        with:
          openai_api_key: ${{ env.OPENAI_API_KEY }}
          system-path: .github/prompts/pr-enhancement.sys.md # unchanged
          template-path: user_prompt.md
          model: ${{ env.OPENAI_MODEL }}
          temperature: 0 # deterministic
          max-tokens: 1200

      # -------------------------------------------------------------------
      # 5) Update the PR body safely
      # -------------------------------------------------------------------
      - name: 🛠️ Update PR description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Write AI output verbatim
          cat > final.md <<'EOF'
          ${{ steps.ai.outputs.content }}
          EOF

          # Fallback to original body if the model produced nothing
          if [ ! -s final.md ]; then
            cp pr_body.txt final.md
          fi

          gh pr edit "${{ steps.meta.outputs.number }}" --body-file final.md

      # -------------------------------------------------------------------
      # 6) Determine & apply labels
      # -------------------------------------------------------------------
      - name: 🏷️ Determine labels
        id: labels
        shell: bash
        run: |
          labels=()
          [ ${{ steps.meta.outputs.feat }}  -gt 0 ] && labels+=('feature')
          [ ${{ steps.meta.outputs.fix }}   -gt 0 ] && labels+=('bugfix')
          [ ${{ steps.meta.outputs.docs }}  -gt 0 ] && labels+=('documentation')
          [ ${{ steps.meta.outputs.chore }} -gt 0 ] && labels+=('maintenance')
          [ ${{ steps.meta.outputs.break }} -gt 0 ] && labels+=('breaking-change')

          conv=${{ steps.meta.outputs.conv }}
          total=${{ steps.meta.outputs.total }}
          if [ "$total" -gt 0 ]; then
            pct=$(awk "BEGIN{print int(($conv/$total)*100)}")
            [ "$pct" -lt 80 ] && labels+=('needs-review')
          fi

          echo "labels=${labels[*]}" >> $GITHUB_OUTPUT

      - name: ➕ Apply labels & auto-assign
        if: steps.labels.outputs.labels != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          # ensure each label exists (idempotent)
          for l in ${{ steps.labels.outputs.labels }}; do
            case "$l" in
              feature)          color="0e8a16" desc="New feature or enhancement" ;;
              bugfix)           color="d73a4a" desc="Bug fix" ;;
              documentation)    color="0075ca" desc="Docs improvement" ;;
              maintenance)      color="fbca04" desc="Maintenance / chores" ;;
              breaking-change)  color="b60205" desc="Breaking change" ;;
              needs-review)     color="fbca04" desc="Needs commit-message review" ;;
            esac
            gh label create "$l" --color "$color" --description "$desc" --force >/dev/null 2>&1 || true
          done

          # add labels & assign to repo owner
          gh pr edit "${{ steps.meta.outputs.number }}" \
            --add-label ${{ steps.labels.outputs.labels }} \
            --add-assignee "${{ github.repository_owner }}"

      # -------------------------------------------------------------------
      # 7) Gentle comment if commit style needs love
      # -------------------------------------------------------------------
      - name: 💡 Commit-message suggestions
        if: steps.meta.outputs.total != 0 && steps.meta.outputs.conv != steps.meta.outputs.total
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          cat > tip.md <<'EOF'
          ## 💡 Commit-message tips

          Some commits don't follow our [Conventional Commits](https://www.conventionalcommits.org/) pattern.
          Adhering to the convention helps automated changelogs and semantic versioning.
          Feel free to polish them if time permits - thanks! ✨
          EOF
          gh pr comment "${{ steps.meta.outputs.number }}" --body-file tip.md

      # -------------------------------------------------------------------
      # 8) Summary for the workflow run
      # -------------------------------------------------------------------
      - name: 📜 Workflow summary
        shell: bash
        run: |
          {
            echo "### 🤖 PR Enhancement complete"
            echo ""
            echo "- **${{ steps.meta.outputs.total }}** commits analysed"
            echo "- **${{ steps.labels.outputs.labels }}** labels applied"
            echo ""
            echo "Enhanced description written back to PR ➡️"
          } >> "$GITHUB_STEP_SUMMARY"
