# 🤖  Pull‑request enhancer
# • Runs only for feature / fix branches that target `preview`
# • Calls the local composite action (.github/actions/openai-chat)
#   to generate an improved PR description from the prompt templates
# • Adds helpful labels and an optional guidance comment
# ---------------------------------------------------------------------

name: 🤖 PR Enhance

on:
  pull_request:
    types: [opened, edited, synchronize]
    branches: [preview]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  enhance:
    # Skip if the *source* branch is the special `preview` branch itself
    if: github.head_ref != 'preview'
    runs-on: ubuntu-latest

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'gpt-4o-mini' }}

    steps:
      # -------------------------------------------------------------------
      # 1) Repo checkout (needed for git log & prompt templates)
      # -------------------------------------------------------------------
      - name: ⬇️ Checkout repo (with full history for git log)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------------------------------------------------
      # 2) Gather PR + commit information (using extracted script)
      # -------------------------------------------------------------------
      - name: 📑 Collect PR meta & commits
        id: meta
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body || '' }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          VERBOSE: true
        shell: bash
        run: |
          set -euo pipefail

          # Use the extracted and tested script for PR metadata collection
          # This replaces ~50 lines of inline bash with a robust, tested script
          # Script outputs GitHub Actions variables and provides verbose logging
          ./.github/scripts/pr-enhance/collect-pr-metadata.sh >> "$GITHUB_OUTPUT"

          # Create legacy files for backward compatibility with next workflow step
          # These files are needed by the "Prepare prompt variables" step
          printf "%s" "$PR_BODY" > pr_body.txt

          git log --pretty=format:"%h %s" \
            "$BASE_SHA..$HEAD_SHA" > commits.txt || touch commits.txt

          git diff --name-only \
            "$BASE_SHA..$HEAD_SHA" > files.txt || touch files.txt

      # -------------------------------------------------------------------
      # 3) Prepare variables for prompt template
      # -------------------------------------------------------------------
      - name: 📝 Prepare prompt variables
        id: vars
        shell: bash
        run: |
          # Read file contents into variables (multiline-safe)
          PR_BODY=$(cat pr_body.txt)
          COMMITS=$(cat commits.txt)
          FILES=$(cat files.txt)

          # Create variables string for the template system (escape for simple KEY=VALUE format)
          {
            echo "PR_TITLE=${{ steps.meta.outputs.title }}"
            echo "PR_BODY=$(echo "$PR_BODY" | tr '\n' ' ' | sed 's/"/\\"/g')"
            echo "TOTAL_COMMITS=${{ steps.meta.outputs.total }}"
            echo "FILES_COUNT=${{ steps.meta.outputs.files_count }}"
            echo "COMMITS=$(echo "$COMMITS" | tr '\n' '; ' | sed 's/"/\\"/g')"
            echo "FILES=$(echo "$FILES" | tr '\n' '; ' | sed 's/"/\\"/g')"
          } > template_vars.txt

          # Output for GitHub Actions (escape newlines)
          {
            echo 'template_vars<<EOF'
            cat template_vars.txt
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------------------
      # 4) Call the OpenAI Chat API with structured output
      # -------------------------------------------------------------------
      - name: 🤖 Generate enhanced description
        id: ai
        uses: ./.github/actions/openai-chat
        with:
          openai_api_key: ${{ env.OPENAI_API_KEY }}
          system-path: .github/prompts/pr-enhancement.sys.md
          template-path: .github/prompts/pr-enhancement.user.md
          schema-path: .github/schema/pr-enhancement.schema.json
          output-path: .github/templates/pr-enhancement.tmpl.md
          vars: ${{ steps.vars.outputs.template_vars }}
          model: ${{ env.OPENAI_MODEL }}
          temperature: 0 # maximum determinism for factual accuracy
          max-tokens: 1200

      # -------------------------------------------------------------------
      # 5) Update the PR body safely
      # -------------------------------------------------------------------
      - name: 🛠️ Update PR description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RAW_CONTENT: ${{ steps.ai.outputs.content }}
          FORMATTED_CONTENT: ${{ steps.ai.outputs.formatted_content }}
          PR_NUMBER: ${{ steps.meta.outputs.number }}
        run: ./.github/scripts/pr-enhance/update-pr-description.sh

      # -------------------------------------------------------------------
      # 6) Determine labels using extracted script
      # -------------------------------------------------------------------
      - name: 🏷️ Determine labels
        id: labels
        shell: bash
        run: |
          # Use extracted script for better testability and maintainability
          labels=$(./.github/scripts/pr-enhance/determine-pr-labels.sh \
            --feat ${{ steps.meta.outputs.feat }} \
            --fix ${{ steps.meta.outputs.fix }} \
            --docs ${{ steps.meta.outputs.docs }} \
            --chore ${{ steps.meta.outputs.chore }} \
            --refactor ${{ steps.meta.outputs.refactor }} \
            --perf ${{ steps.meta.outputs.perf }} \
            --test ${{ steps.meta.outputs.test }} \
            --style ${{ steps.meta.outputs.style }} \
            --ci ${{ steps.meta.outputs.ci }} \
            --break ${{ steps.meta.outputs.break }} \
            --conv ${{ steps.meta.outputs.conv }} \
            --total ${{ steps.meta.outputs.total }})

          echo "labels=$labels" >> $GITHUB_OUTPUT

      - name: ➕ Apply labels & auto-assign using extracted script
        if: steps.labels.outputs.labels != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          # Use extracted script for better testability and maintainability
          ./.github/scripts/pr-enhance/apply-pr-labels.sh \
            --labels "${{ steps.labels.outputs.labels }}" \
            --pr-number "${{ steps.meta.outputs.number }}" \
            --assignee "${{ github.repository_owner }}"

      # -------------------------------------------------------------------
      # 7) Post comprehensive analysis summary
      # -------------------------------------------------------------------
      - name: 🤖 Post analysis summary
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          cat > summary_comment.md <<'EOF'
          ## 🤖 PR Analysis Complete

          **Commit Analysis:**
          - 📊 **${{ steps.meta.outputs.total }}** total commits analyzed
          - ✅ **${{ steps.meta.outputs.conv }}** follow conventional format
          - 🆕 **${{ steps.meta.outputs.feat }}** new features
          - 🐛 **${{ steps.meta.outputs.fix }}** bug fixes
          - 📚 **${{ steps.meta.outputs.docs }}** documentation updates
          - 🎨 **${{ steps.meta.outputs.style }}** code style changes
          - ♻️ **${{ steps.meta.outputs.refactor }}** refactoring
          - ⚡ **${{ steps.meta.outputs.perf }}** performance improvements
          - 🧪 **${{ steps.meta.outputs.test }}** testing updates
          - 🔧 **${{ steps.meta.outputs.chore }}** maintenance/chores
          - ⚙️ **${{ steps.meta.outputs.ci }}** CI/build changes
          - ⚠️ **${{ steps.meta.outputs.break }}** breaking changes

          **Files Changed:** `${{ steps.meta.outputs.files_count }}`

          **Labels Added:** `${{ steps.labels.outputs.labels }}`

          This PR description has been enhanced by AI to follow our project standards. Thanks for contributing! 🎸
          EOF

          gh pr comment "${{ steps.meta.outputs.number }}" --body-file summary_comment.md

      # -------------------------------------------------------------------
      # 8) Post commit quality feedback using extracted script
      # -------------------------------------------------------------------
      - name: 📊 Post commit quality feedback
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          # Use extracted script for better testability and maintainability
          ./.github/scripts/pr-enhance/post-commit-feedback.sh \
            --conventional ${{ steps.meta.outputs.conv }} \
            --total ${{ steps.meta.outputs.total }} \
            --pr-number ${{ steps.meta.outputs.number }}

      # -------------------------------------------------------------------
      # 9) Summary for the workflow run
      # -------------------------------------------------------------------
      - name: 📜 Workflow summary
        shell: bash
        run: |
          {
            echo "### 🤖 PR Enhancement complete"
            echo ""
            echo "- **${{ steps.meta.outputs.total }}** commits analysed"
            echo "- **${{ steps.labels.outputs.labels }}** labels applied"
            echo ""
            echo "Enhanced description written back to PR ➡️"
          } >> "$GITHUB_STEP_SUMMARY"
