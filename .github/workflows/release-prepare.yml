# --------------------------------------------------------------------------- #
#  üîÑ  Release preparation ( preview ‚Üí main ‚Äúhandoff‚Äù branch)                  #
# --------------------------------------------------------------------------- #
name: üîÑ Release Preparation

# Fires whenever code is pushed to the preview branch (the pre‚Äërelease branch)
on:
  push:
    branches: [preview]

# We need to update files and push a commit
permissions:
  contents: write
  pull-requests: read

# --------------------------------------------------------------------------- #
#  Re‚Äëusable ‚Äúsetup‚Äù job (Node 22 + pnpm cache)                               #
# --------------------------------------------------------------------------- #
jobs:
  setup:
    uses: ./.github/workflows/.reuse/setup-node-pnpm.yml
    with:
      node-version: 22.x # keep in sync with production toolchain

  # --------------------------------------------------------------------------- #
  #  Main preparation job                                                       #
  # --------------------------------------------------------------------------- #
  prepare:
    name: üîÑ Release Preparation
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      # --------------------------------------------------------------------- #
      # 1Ô∏è‚É£  Repo + tooling                                                   #
      # --------------------------------------------------------------------- #
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # corepack (pnpm) is already enabled by the reusable setup job
      - name: üì• Install dependencies
        run: pnpm install --frozen-lockfile

      # --------------------------------------------------------------------- #
      # 2Ô∏è‚É£  Identify version bump (semver heuristic)                         #
      # --------------------------------------------------------------------- #
      - name: üè∑Ô∏è Last released tag
        id: last_tag
        run: |
          echo "tag=$(git describe --tags --abbrev=0 2>/dev/null || echo v0.0.0)" >> "$GITHUB_OUTPUT"

      - name: üìù Collect commits since last tag
        id: commits
        run: |
          RANGE="${{ steps.last_tag.outputs.tag }}..HEAD"
          COMMITS=$(git log "$RANGE" --max-count=200 --pretty=format:'%h %s%n%b')
          {
            echo 'commits<<EOF'
            echo "$COMMITS"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: üîç Determine semver bump type
        id: bump
        env:
          RAW: ${{ steps.commits.outputs.commits }}
        run: |
          echo "$RAW" > _c.txt
          if grep -Eq '(^|[\n])BREAKING CHANGE:|!:' _c.txt; then
            echo 'type=major' >> "$GITHUB_OUTPUT"
          elif grep -Eq '^[a-f0-9]+ feat(\(|:)' _c.txt; then
            echo 'type=minor' >> "$GITHUB_OUTPUT"
          else
            echo 'type=patch' >> "$GITHUB_OUTPUT"
          fi
          rm _c.txt

      # --------------------------------------------------------------------- #
      # 3Ô∏è‚É£  Bump package.json (no git tag yet)                               #
      # --------------------------------------------------------------------- #
      - name: üìà Bump version
        id: version
        run: |
          NEW=$(npm version ${{ steps.bump.outputs.type }} --no-git-tag-version)
          echo "version=${NEW#v}" >> "$GITHUB_OUTPUT"

      # --------------------------------------------------------------------- #
      # 4Ô∏è‚É£  Generate CHANGELOG entry with OpenAI                             #
      # --------------------------------------------------------------------- #
      - name: ü§ñ Generate changelog entry
        id: changelog
        uses: ./.github/actions/openai-chat
        with:
          system_prompt: .github/prompts/changelog.sys.md
          user_template: .github/prompts/changelog.tmpl.md
          # workflow‚Äëwide fall‚Äëbacks keep things humming even without secrets
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          model: ${{ secrets.OPENAI_MODEL || 'gpt-4.1-nano' }}
          temperature: 0.3
          max_tokens: 1200
          vars: |
            VERSION=${{ steps.version.outputs.version }}
            COMMITS=${{ steps.commits.outputs.commits }}

      # --------------------------------------------------------------------- #
      # 5Ô∏è‚É£  Write / prepend the new entry to CHANGELOG.md                    #
      # --------------------------------------------------------------------- #
      - name: üìù Update CHANGELOG.md
        run: |
          VER=${{ steps.version.outputs.version }}
          TODAY=$(date +%Y-%m-%d)
          ENTRY="## [$VER] - $TODAY\n\n${{ steps.changelog.outputs.content }}\n\n---\n"

          { head -n 9 CHANGELOG.md; echo "$ENTRY"; tail -n +10 CHANGELOG.md; } > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md

      # --------------------------------------------------------------------- #
      # 6Ô∏è‚É£  Commit & push                                                    #
      # --------------------------------------------------------------------- #
      - name: üíæ Commit version + changelog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "GitHub Action"
          git config user.email "action@github.com"
          git add package.json CHANGELOG.md
          git commit -m "chore(release): v${{ steps.version.outputs.version }} ‚Äì update changelog" \
            || echo "Nothing to commit"
          git push

      # --------------------------------------------------------------------- #
      # 7Ô∏è‚É£  Summary                                                          #
      # --------------------------------------------------------------------- #
      - name: üéâ Release prep summary
        run: |
          {
            echo "## üéâ Release Preparation Complete"
            echo ""
            echo "- **Version:**  `${{ steps.version.outputs.version }}`"
            echo "- **Bump type:** `${{ steps.bump.outputs.type }}`"
            echo "- **CHANGELOG:** updated and committed"
            echo ""
            echo "‚û°Ô∏è  Create a PR from **preview ‚û°Ô∏è main** when ready to publish."
          } >> "$GITHUB_STEP_SUMMARY"
