# --------------------------------------------------------------------------- #
#  🚀  Create / update Release Pull‑Request (preview → main)                  #
# --------------------------------------------------------------------------- #
name: 🚀 Create Release PR

# Trigger as soon as the “Release Preparation” workflow finishes successfully
on:
  workflow_run:
    workflows: [🔄 Release Preparation]
    types: [completed]
    branches: [preview]

permissions:
  contents: write # we may push labels
  pull-requests: write # create / edit PRs

jobs:
  # --------------------------------------------------------------------------- #
  #  Main job – create or update the release PR                                 #
  # --------------------------------------------------------------------------- #
  release-pr:
    name: 🚀 Create / Update Release PR
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    env:
      GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

    steps:
      # --------------------------------------------------------------------- #
      # 1️⃣  Repo checkout & setup                                            #
      # --------------------------------------------------------------------- #
      - uses: actions/checkout@v4
        with:
          ref: preview # Explicitly checkout latest preview branch
          fetch-depth: 0
          token: ${{ env.GH_TOKEN }}

      # Force refresh to ensure we have the latest changes from release-prepare
      - name: 🔄 Ensure latest preview state
        run: ./.github/scripts/release-pr/sync-preview-branch.sh

      - name: 🛠️ Setup Node & pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: 22.x

      # --------------------------------------------------------------------- #
      # 2️⃣  Verify release-prepare completed successfully                    #
      # --------------------------------------------------------------------- #
      - name: ✅ Verify release preparation commit
        run: ./.github/scripts/release-pr/verify-release-commit.sh

      # --------------------------------------------------------------------- #
      # 3️⃣  Gather release metadata                                          #
      # --------------------------------------------------------------------- #
      - name: 📦 Version
        id: version
        run: |
          echo "ver=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"

      - name: 📝 Latest changelog entry
        id: changelog
        run: |
          ./.github/scripts/release-pr/extract-changelog-entry.sh \
            --file CHANGELOG.md \
            --output-format github-actions \
            --debug >> "$GITHUB_OUTPUT"

      # --------------------------------------------------------------------- #
      # 4️⃣  Generate (or regenerate) PR body with OpenAI                     #
      # --------------------------------------------------------------------- #
      - name: 🔍 Debug - System prompt
        run: |
          echo "=== SYSTEM PROMPT ==="
          cat .github/prompts/pr-description.sys.md
          echo "====================="

      - name: 🔍 Debug - User template
        run: |
          echo "=== USER TEMPLATE ==="
          cat .github/prompts/pr-description.user.md
          echo "====================="

      - name: 🔍 Debug - Variables
        run: |
          ./.github/scripts/release-pr/debug-variables.sh \
            --version "${{ steps.version.outputs.ver }}" \
            --changelog "${{ steps.changelog.outputs.entry }}" \
            --max-chars 800

      - name: 🤖 Compose PR description
        id: body
        uses: ./.github/actions/openai-chat
        with:
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          system-path: .github/prompts/pr-description.sys.md
          template-path: .github/prompts/pr-description.user.md
          vars: |
            VERSION=${{ steps.version.outputs.ver }}
            CHANGELOG=${{ steps.changelog.outputs.entry }}
          model: ${{ secrets.OPENAI_MODEL || 'gpt-4o-mini' }}
          temperature: 0.3
          max-tokens: 1000

      - name: 🔍 Debug - AI response
        env:
          AI_RESPONSE_CONTENT: ${{ steps.body.outputs.content }}
        run: |
          # Pass content via environment variable to avoid shell parsing issues
          ./.github/scripts/release-pr/debug-ai-response.sh \
            --content "$AI_RESPONSE_CONTENT" \
            --title "AI RESPONSE" \
            --max-chars 500

      # --------------------------------------------------------------------- #
      # 5️⃣  Ensure required labels exist                                     #
      # --------------------------------------------------------------------- #
      - name: 🏷️ Ensure labels
        run: |
          for l in release automated; do
            gh label create "$l" --description "$l related" --color "0052cc" --force >/dev/null 2>&1 || true
          done

      # --------------------------------------------------------------------- #
      # 6️⃣  Create or update the PR                                          #
      # --------------------------------------------------------------------- #
      - name: 🚀 Manage Release PR
        id: pr
        env:
          PR_BODY_CONTENT: ${{ steps.body.outputs.content }}
        run: |
          # Write content to temporary file to avoid shell parsing issues
          printf '%s' "$PR_BODY_CONTENT" > /tmp/pr_body_content.txt

          # Encode to base64 from file (completely safe from shell parsing)
          BODY_BASE64=$(base64 -w 0 /tmp/pr_body_content.txt)

          # Call script with base64 content
          ./.github/scripts/release-pr/manage-release-pr.sh \
            --version "${{ steps.version.outputs.ver }}" \
            --body-base64 "$BODY_BASE64" \
            --assignee "${{ github.repository_owner }}" >> "$GITHUB_OUTPUT"

          # Clean up temporary file
          rm -f /tmp/pr_body_content.txt

      # --------------------------------------------------------------------- #
      # 7️⃣  Summary                                                          #
      # --------------------------------------------------------------------- #
      - name: 📋 Summary
        run: |
          echo "## 🚀 Release PR Ready" >> "$GITHUB_STEP_SUMMARY"
          echo ""                        >> "$GITHUB_STEP_SUMMARY"
          echo "- **PR #${{ steps.pr.outputs.pr_number }}** : preview → main" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Version:** v${{ steps.version.outputs.ver }}"       >> "$GITHUB_STEP_SUMMARY"
          echo "- **Labels:** release, automated"                       >> "$GITHUB_STEP_SUMMARY"
          echo "- **Action:** ${{ steps.pr.outputs.action_taken }}"     >> "$GITHUB_STEP_SUMMARY"
          echo ""                                                      >> "$GITHUB_STEP_SUMMARY"
          echo "Please review & merge to publish the release! 🎸"       >> "$GITHUB_STEP_SUMMARY"
