name: üöÄ Create Release PR

on:
  workflow_run:
    workflows: [üîÑ Release Preparation]
    types: [completed]
    branches: [preview]

jobs:
  create-release-pr:
    name: üöÄ Create Release PR
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîÑ Switch to preview branch
        run: |
          git fetch origin preview:preview
          git checkout preview

      - name: üìä Get release information
        id: release_info
        run: |
          # Get current version from package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

          # Get latest changelog entry (between first two ## headers)
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG_ENTRY=$(awk '/^## \[/{if(++count==2) exit} count==1 && !/^## \[/' CHANGELOG.md || echo "No changelog entries found")
          else
            CHANGELOG_ENTRY="No CHANGELOG.md file found"
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "Latest changelog entry extracted"

      - name: üîç Check if PR already exists
        id: check_pr
        run: |
          # Check if a PR from preview to main already exists
          EXISTING_PR=$(gh pr list --base main --head preview --json number --jq '.[0].number // empty')

          if [ -n "$EXISTING_PR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "PR #$EXISTING_PR already exists from preview to main"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No existing PR found"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ü§ñ Generate PR description with OpenAI
        id: pr_description
        if: steps.check_pr.outputs.exists == 'false'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ secrets.OPENAI_MODEL || 'gpt-4o-mini' }}
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"
          CHANGELOG="${{ steps.release_info.outputs.changelog }}"
          CURRENT_DATE=$(date +"%Y-%m-%d")

          # Store changelog safely in temporary file to avoid shell interpretation issues
          echo "$CHANGELOG" > changelog_temp.txt

          # Create user prompt template
          cat > user_prompt_template.txt << 'EOF'
          Create a pull request description for releasing version VERSION_PLACEHOLDER of setlistfm-ts TypeScript SDK. This is an automated release PR from preview to main branch. Here's the changelog for this release:

          CHANGELOG_PLACEHOLDER

          Include:
          1. Brief release summary
          2. The changelog content (formatted nicely)
          3. Testing and review notes
          4. Merge instructions

          Make it professional but friendly. This will be reviewed before merging to trigger the final release.
          EOF

          # Replace version placeholder
          sed "s/VERSION_PLACEHOLDER/$VERSION/g" user_prompt_template.txt > user_prompt_with_version.txt

          # Replace changelog placeholder with actual content
          sed '/CHANGELOG_PLACEHOLDER/r changelog_temp.txt' user_prompt_with_version.txt | sed '/CHANGELOG_PLACEHOLDER/d' > user_prompt_final.txt

          # Read the final prompt
          USER_PROMPT=$(cat user_prompt_final.txt)

          # Clean up temporary files
          rm -f changelog_temp.txt user_prompt_template.txt user_prompt_with_version.txt user_prompt_final.txt

          # Call OpenAI API with properly escaped JSON
          PR_DESCRIPTION=$(jq -n \
            --arg model "$OPENAI_MODEL" \
            --arg system_msg "You are an expert at writing professional GitHub pull request descriptions for software releases. Create clear, informative PR descriptions that help reviewers understand what's being released and why it matters. Focus on user impact and key changes. Use GitHub markdown formatting." \
            --arg user_msg "$USER_PROMPT" \
            '{
              "model": $model,
              "messages": [
                {
                  "role": "system",
                  "content": $system_msg
                },
                {
                  "role": "user",
                  "content": $user_msg
                }
              ],
              "max_tokens": 1000,
              "temperature": 0.3
            }' | curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d @- \
            https://api.openai.com/v1/chat/completions | \
            jq -r '.choices[0].message.content // "Failed to generate PR description"')

          # Validate AI response and fallback if needed
          if [ -z "$PR_DESCRIPTION" ] || [ "$PR_DESCRIPTION" = "Failed to generate PR description" ]; then
            echo "AI description generation failed, using fallback template"
            PR_DESCRIPTION="## üöÄ Release v$VERSION

            This automated PR prepares the release of **setlistfm-ts v$VERSION** from the preview branch to main.

            ## üìã Changelog

            $CHANGELOG

            ## ‚úÖ Pre-merge Checklist

            - [ ] Review changelog for accuracy
            - [ ] Verify version bump is correct
            - [ ] Ensure all CI checks pass
            - [ ] Confirm no breaking changes are undocumented

            ## üöÄ Release Process

            Merging this PR will trigger:
            - GitHub release creation
            - NPM package publishing
            - Git tag creation

            Ready for review! üé∏"
          fi

          # Save PR description
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_DESCRIPTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "Generated PR description"

      - name: üè∑Ô∏è Ensure labels exist
        if: steps.check_pr.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check and create 'release' label if it doesn't exist
          if ! gh label list --json name --jq '.[].name' | grep -q "^release$"; then
            echo "Creating 'release' label..."
            gh label create "release" --description "Issues and PRs related to releases" --color "0052cc"
          else
            echo "'release' label already exists"
          fi

          # Check and create 'automated' label if it doesn't exist
          if ! gh label list --json name --jq '.[].name' | grep -q "^automated$"; then
            echo "Creating 'automated' label..."
            gh label create "automated" --description "Automatically created by GitHub Actions" --color "ededed"
          else
            echo "'automated' label already exists"
          fi

      - name: üéØ Create release pull request
        id: create_pr
        if: steps.check_pr.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"

          # Save PR description to file to avoid shell interpretation issues
          cat << 'PR_BODY_EOF' > pr_description.txt
          ${{ steps.pr_description.outputs.description }}
          PR_BODY_EOF

          # Create the PR using --body-file to avoid shell interpretation issues
          PR_URL=$(gh pr create \
            --base main \
            --head preview \
            --title "üöÄ Release v$VERSION" \
            --body-file pr_description.txt \
            --label "release,automated" \
            --assignee "${{ github.repository_owner }}")

          echo "Created release PR: $PR_URL"

          # Extract PR number from URL for summary
          PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]\+$')
          echo "new_pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: üîÑ Update existing PR
        if: steps.check_pr.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"
          PR_NUMBER="${{ steps.check_pr.outputs.pr_number }}"

          # Update the existing PR title and ensure assignment
          gh pr edit $PR_NUMBER --title "üöÄ Release v$VERSION" --add-assignee "${{ github.repository_owner }}"

          echo "Updated existing PR #$PR_NUMBER with new version and assignment"

      - name: üìã Summary
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"

          if [ "${{ steps.check_pr.outputs.exists }}" == "false" ]; then
            PR_NUMBER="${{ steps.create_pr.outputs.new_pr_number }}"
            echo "## üöÄ Release PR Created!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ **PR #$PR_NUMBER**: Release v$VERSION" >> $GITHUB_STEP_SUMMARY
            echo "üéØ **From**: preview ‚Üí main" >> $GITHUB_STEP_SUMMARY
            echo "ü§ñ **Description**: AI-generated with changelog details" >> $GITHUB_STEP_SUMMARY
            echo "üè∑Ô∏è **Labels**: release, automated" >> $GITHUB_STEP_SUMMARY
          else
            PR_NUMBER="${{ steps.check_pr.outputs.pr_number }}"
            echo "## üîÑ Release PR Updated!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ **PR #$PR_NUMBER**: Updated to Release v$VERSION" >> $GITHUB_STEP_SUMMARY
            echo "üéØ **Status**: Existing PR title updated with new version" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the generated PR description and changelog" >> $GITHUB_STEP_SUMMARY
          echo "2. Ensure CI passes on the PR" >> $GITHUB_STEP_SUMMARY
          echo "3. Merge the PR to trigger GitHub release and npm publishing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ **Ready for release review!**" >> $GITHUB_STEP_SUMMARY
